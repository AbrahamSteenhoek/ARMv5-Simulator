#include "operand2_regshiftreg.h"


Operand2_RegShiftReg::Operand2_RegShiftReg(uint bits, RegisterBank *regs): Operand2(bits)
{
    Rm = Memory::ExtractBits(bits, 0, 3);
    Rs = Memory::ExtractBits(bits, 8, 11) >> 8;
    valAtRm = regs->get(Rm);
    valAtRs = regs->get(Rs);

    if (Rm == 15) {
        valAtRm += 4;
    }
    if (Rs == 15) {
        valAtRs += 4;
    }
    //cout << "Rm: " << valAtRm << " Rs: " << valAtRs << endl;
    shiftType = Memory::ExtractBits(bits, 5, 6) >> 5;
    value = BarrelShifter::autoShift(shiftType, valAtRm, valAtRs);
    //cout << "value: " << value << endl;
}


/*
 * Method: toString()
 * - returns a formatted QString representing the ARM assembly that the Operand2 makes up
 */ 
QString Operand2_RegShiftReg::toString()
{
    // base register and then shift register
    QString text = QString("%1, ").arg(RegisterBank::regFormatString(Rm));
    // shift type
    switch(shiftType) {
    case 0b00:
        text.append("lsl ");
        break;
    case 0b01:
        text.append("lsr ");
        break;
    case 0b10:
        text.append("asr ");
        break;
    case 0b11:
        text.append("ror ");
        break;
    }
    text.append(QString("%1").arg(RegisterBank::regFormatString(Rs)));

    return text;
}
