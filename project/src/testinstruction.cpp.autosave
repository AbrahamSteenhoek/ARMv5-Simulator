/*----------------------------------------------------------------------------/
 * Abraham Steenhoek | class: CPS310 | login: astee529 | BJUID: 160520
 *
 * testInstruction.cpp
 *  - contains the definitions of the constructor and all methods for the testInstruction class
 * --------------------------------------------------------------------------*/

#include "testinstruction.h"

testInstruction::testInstruction()
{

}

void testInstruction::runTests()
{
    qInfo() << "testing Instruction subclasses...";
    Memory* RAM = new Memory("32768");
    RegisterBank *regs = new RegisterBank(17);
    CPU *testCPU = new CPU(RAM,regs);
    // TODO - complete unit testing

    // Data Processing ------------------------------------------------------------------------------------------------------------------------------------

    // MOV instr
    Instruction_DataProcessing *mov = new Instruction_DataProcessing(0xe3a02030, testCPU->Regs(), testCPU->memory());

    // test decoding
    assert(mov->Opcode() == 0b1101);
    assert(mov->Dest() == 0b0010);
    assert(mov->Source1() == 48);
    assert(mov->text() == "mov r2, #48");

    // TODO: test disassembly
    //assert(mov1->text() == "mov r2, #48");
    assert(regs->get(2) == 0);
    mov->exec();
    assert(regs->get(2) == 48);


    // testing rotate right
    mov = new Instruction_DataProcessing(0xe3a02130, testCPU->Regs(), testCPU->memory());
    assert(mov->Source1() == 12);
    mov->exec();
    assert(regs->get(2) == 12);
    assert(mov->text() == "mov r2, #12");

    // testing rotate right with wraparound
    mov = new Instruction_DataProcessing(0xe3a04320, testCPU->Regs(), testCPU->memory());
    assert(mov->Source1() == 2147483648);
    mov->exec();
    assert(regs->get(4) == 2147483648);

    //assert(mov->text() == "mov r4, #2147483648");

    // mov r5, r3
    regs->set(3, 0x69);
    regs->set(5, 0x42);
    mov = new Instruction_DataProcessing(0xE1A05003, testCPU->Regs(), testCPU->memory());
    mov->exec();
    assert(regs->get(5) == 0x69);

    // mov r5, r15
    regs->set(15, 0x00);
    regs->set(5, 0x42);
    mov = new Instruction_DataProcessing(0xE1A0500F, testCPU->Regs(), testCPU->memory());
    mov->exec();
    assert(regs->get(5) == 0x4);

    // mov r5, r3, lsl 4
    regs->set(3, 0b1111);
    regs->set(5, 0x42);
    mov = new Instruction_DataProcessing(0xE1A05203, testCPU->Regs(), testCPU->memory());
    mov->exec();
    assert(regs->get(5) == 0b11110000);

    // mov r5, r3, lsr #2
    regs->set(3, 0b1111);
    regs->set(5, 0x42);
    mov = new Instruction_DataProcessing(0xE1A05123, testCPU->Regs(), testCPU->memory());
    mov->exec();
    assert(regs->get(5) == 0b11);

    // mov r5, r3, lsl r4
    regs->set(3, 0x00F0);
    regs->set(5, 0x42);
    regs->set(4, 4);
    mov = new Instruction_DataProcessing(0xE1A05413, testCPU->Regs(), testCPU->memory());
    mov->exec();
    assert(regs->get(5) == 0x0F00);

    // mov r5, r3, lsr r4
    regs->set(3, 0x00F0);
    regs->set(5, 0x42);
    regs->set(4, 4);
    mov = new Instruction_DataProcessing(0xE1A05433, testCPU->Regs(), testCPU->memory());
    mov->exec();
    assert(regs->get(5) == 0x000F);

    // MVN
    regs->set(3, 4);
    Instruction_DataProcessing *mvn = new Instruction_DataProcessing(0xE3E03001, testCPU->Regs(), testCPU->memory());
    mvn->exec();
    assert(regs->get(3) == 0xFFFFFFFE);

    // ADD instr
    // add r4, r5, #25
    regs->set(5, 45);
    Instruction_DataProcessing *add = new Instruction_DataProcessing(0xE2854019, testCPU->Regs(), testCPU->memory());
    add->exec();
    assert(regs->get(4) == 70);

    // add r4, r5, r6
    regs->set(5, 45);
    regs->set(6, 25);
    add = new Instruction_DataProcessing(0xE0854006, testCPU->Regs(), testCPU->memory());
    add->exec();
    assert(regs->get(4) == 70);

    // add r4, r5, r6, lsl #2
    // 45 + 12
    regs->set(5, 45);
    regs->set(6, 0b11);
    add = new Instruction_DataProcessing(0xE0854106, testCPU->Regs(), testCPU->memory());
    add->exec();
    assert(regs->get(4) == 57);


    // add r4, r5, r6, lsl r7
    // 45 + 12
    regs->set(5, 45);
    regs->set(6, 0b11);
    regs->set(7, 2);
    add = new Instruction_DataProcessing(0xE0854716, testCPU->Regs(), testCPU->memory());
    add->exec();
    assert(regs->get(4) == 57);


    // SUB
    regs->set(5, 6);
    regs->set(6, 0b11);
    regs->set(7, 2);
    regs->set(4, 0);
    Instruction_DataProcessing *sub = new Instruction_DataProcessing(0xE0454716, testCPU->Regs(), testCPU->memory());
    sub->exec();
    assert(regs->get(4) == -6);

    // RSB
    regs->set(5, 6);
    regs->set(6, 0b11);
    regs->set(7, 2);
    regs->set(4, 0);
    sub = new Instruction_DataProcessing(0xE0654716, testCPU->Regs(), testCPU->memory());
    sub->exec();
    assert(regs->get(4) == 6);

    // ORR
    // orr r4, r5, r6, lsl r7
    regs->set(5, 0xFF0F);
    regs->set(6, 0x000F);
    regs->set(7, 4);
    regs->set(4, 0);
    Instruction *orr = new Instruction_DataProcessing(0xE1954716, testCPU->Regs(), testCPU->memory());
    orr->exec();
    assert(regs->get(4) == 0xFFFF);

    // EOR
    // eor r4, r5, r6 lsl r7
    regs->set(5, 0xFFFF);
    regs->set(6, 0x0F0F);
    regs->set(7, 4);
    regs->set(4, 0);
    Instruction *eor = new Instruction_DataProcessing(0xE0354716, testCPU->Regs(), testCPU->memory());
    eor->exec();
    assert(regs->get(4) == 0x0F0F);

    // BIC
    regs->set(6, 0xF0F0F0F0);
    regs->set(5, 0xFFFFFFFF);
    regs->set(4, 0);
    Instruction *bic = new Instruction_DataProcessing(0xE1C54006, testCPU->Regs(), testCPU->memory());
    bic->exec();
    assert(regs->get(4) == 0x0F0F0F0F);

    // MUL
    regs->set(5, 5);
    regs->set(6, 3);
    regs->set(4, 0);
    Instruction *mul = new Instruction_DataProcessing(0xE0040695, testCPU->Regs(), testCPU->memory());
    mul->exec();
    assert(regs->get(4) == 5*3);


    // LOAD/STORE ------------------------------------------------------------------------------------------------------------------------------------

    // LDR instr
    // 12-bit immediate offset
    regs->set(4, 0);
    regs->set(5, 7);
    // memory at addr 7 + 25
    RAM->WriteWord(32, 0xFEFEFEFE);
    Instruction *ldr = new Instruction_LoadStore(0xE5954019, testCPU->Regs(), testCPU->memory());
    assert(((Instruction_LoadStore*)ldr)->rd() == 4);
    assert(((Instruction_LoadStore*)ldr)->rn() == 5);
    ldr->exec();
    assert(regs->get(4) == 0xFEFEFEFE);

    // ldr r4, [r5, #25]
    regs->set(4, 0);
    regs->set(5, 7);
    regs->set(6, 25);
    ldr = new Instruction_LoadStore(0xE7954006, testCPU->Regs(), testCPU->memory());
    ldr->exec();
    assert(regs->get(4) == 0xFEFEFEFE);

    // ldr r4, [r6, r5, lsl #2]
    regs->set(4, 0);
    regs->set(5, 2);
    regs->set(6, 24);
    ldr = new Instruction_LoadStore(0xE7964105, testCPU->Regs(), testCPU->memory());
    ldr->exec();
    assert(regs->get(4) == 0xFEFEFEFE);

    // ldrb r4, [r6, r5, lsl #2]
    regs->set(4, 0);
    regs->set(5, 2);
    regs->set(6, 24);
    RAM->WriteByte(32, 0x9A);
    ldr = new Instruction_LoadStore(0xE7D64105, testCPU->Regs(), testCPU->memory());
    ldr->exec();
    assert(regs->get(4) == 0x0000009A);

    // ldr r7, [r2, -r4]
    regs->set(7, 0);
    regs->set(2, 0x5000);
    regs->set(4, 0x8);
    RAM->WriteWord(0x4ff8, 0xFEDCBA98);
    ldr = new Instruction_LoadStore(0xE7127004, testCPU->Regs(), testCPU->memory());
    ldr->exec();
    assert(regs->get(7) == 0xFEDCBA98);

    // ldr r7, [r2, -r4, lsl #2]
    regs->set(7, 0);
    regs->set(2, 0x5000);
    regs->set(4, 0x2);
    RAM->WriteWord(0x4ff8, 0xFEDCBA98);
    ldr = new Instruction_LoadStore(0xE7127104, testCPU->Regs(), testCPU->memory());
    ldr->exec();
    assert(regs->get(7) == 0xFEDCBA98);

    // ldrb r7, [r2, -r4, lsl #2]
    regs->set(7, 0);
    regs->set(2, 0x5000);
    regs->set(4, 0x2);
    RAM->WriteWord(0x4ff8, 0xFEDCBA98);
    ldr = new Instruction_LoadStore(0xE7527104, testCPU->Regs(), testCPU->memory());
    ldr->exec();
    assert(regs->get(7) == 0x00000098);

    // ldr r7, [r2, -r4]!
    regs->set(7, 0);
    regs->set(2, 0x5000);
    regs->set(4, 0x8);
    RAM->WriteWord(0x4ff8, 0xFEDCBA98);
    ldr = new Instruction_LoadStore(0xE7327004, testCPU->Regs(), testCPU->memory());
    ldr->exec();
    assert(regs->get(7) == 0xFEDCBA98);
    assert(regs->get(2) == 0x4ff8);

    // ldr r7, [r2, -#8]     @ 4ff8
    regs->set(7, 0);
    regs->set(2, 0x5000);
    RAM->WriteWord(0x4ff8, 0xFEDCBA98);
    ldr = new Instruction_LoadStore(0xE5127008, testCPU->Regs(), testCPU->memory());
    ldr->exec();
    assert(regs->get(7) == 0xFEDCBA98);

    // STR instr
    // str r7, [r2, -r4]
    regs->set(7, 0xFEDCBA98);
    regs->set(2, 0x5000);
    regs->set(4, 0x8);
    RAM->WriteWord(0x4ff8, 0);
    Instruction *str = new Instruction_LoadStore(0xE7227004, testCPU->Regs(), testCPU->memory());
    str->exec();
    assert(RAM->ReadWord(0x4FF8) == 0xFEDCBA98);
    assert(regs->get(2) == 0x4FF8);

    // STR instr
    // strb r7, [r2, -r4]
    regs->set(7, 0xFEDCBA98);
    regs->set(2, 0x5000);
    regs->set(4, 0x4);
    RAM->clear();
    str = new Instruction_LoadStore(0xE7427004, testCPU->Regs(), testCPU->memory());
    str->exec();
    assert(RAM->ReadWord(0x4FFc) == 0x98);

    regs->set(7, 0x100);
    Instruction_LoadStore *stmdb = new Instruction_LoadStore(0xE807AAAA, testCPU->Regs(), testCPU->memory());
    assert(stmdb->getRegList().size() == 8);
    stmdb->exec();
    assert(stmdb->isReglistContinuous() == false);

    stmdb = new Instruction_LoadStore(0xE8070F00, testCPU->Regs(), testCPU->memory());
    stmdb->exec();
    assert(stmdb->isReglistContinuous() == true);





    qInfo() << "Instruction testing complete" << endl;
}
